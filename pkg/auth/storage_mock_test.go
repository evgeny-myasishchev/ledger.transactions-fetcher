// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/dal/storage.go

// Package auth is a generated GoMock package.
package auth

import (
	context "context"
	dal "github.com/evgeny-myasishchev/ledger.transactions-fetcher/pkg/dal"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Setup mocks base method
func (m *MockStorage) Setup(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup
func (mr *MockStorageMockRecorder) Setup(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockStorage)(nil).Setup), ctx)
}

// GetAuthTokenByEmail mocks base method
func (m *MockStorage) GetAuthTokenByEmail(ctx context.Context, email string) (*dal.AuthTokenDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthTokenByEmail", ctx, email)
	ret0, _ := ret[0].(*dal.AuthTokenDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthTokenByEmail indicates an expected call of GetAuthTokenByEmail
func (mr *MockStorageMockRecorder) GetAuthTokenByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthTokenByEmail", reflect.TypeOf((*MockStorage)(nil).GetAuthTokenByEmail), ctx, email)
}

// SaveAuthToken mocks base method
func (m *MockStorage) SaveAuthToken(ctx context.Context, token *dal.AuthTokenDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAuthToken", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAuthToken indicates an expected call of SaveAuthToken
func (mr *MockStorageMockRecorder) SaveAuthToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAuthToken", reflect.TypeOf((*MockStorage)(nil).SaveAuthToken), ctx, token)
}

// SavePendingTransaction mocks base method
func (m *MockStorage) SavePendingTransaction(ctx context.Context, trx *dal.PendingTransactionDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePendingTransaction", ctx, trx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePendingTransaction indicates an expected call of SavePendingTransaction
func (mr *MockStorageMockRecorder) SavePendingTransaction(ctx, trx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePendingTransaction", reflect.TypeOf((*MockStorage)(nil).SavePendingTransaction), ctx, trx)
}

// FindNotSyncedTransactions mocks base method
func (m *MockStorage) FindNotSyncedTransactions(ctx context.Context, accountID string) ([]dal.PendingTransactionDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNotSyncedTransactions", ctx, accountID)
	ret0, _ := ret[0].([]dal.PendingTransactionDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNotSyncedTransactions indicates an expected call of FindNotSyncedTransactions
func (mr *MockStorageMockRecorder) FindNotSyncedTransactions(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNotSyncedTransactions", reflect.TypeOf((*MockStorage)(nil).FindNotSyncedTransactions), ctx, accountID)
}
